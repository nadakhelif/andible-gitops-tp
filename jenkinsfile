pipeline {
    agent any

    environment {
        VM_IP = '40.71.59.194'  // Set your VM's IP address
    }

    stages {
        stage('Prepare Ansible Inventory') {
            steps {
                script {
                    dir('ansible') {
                        withCredentials([string(credentialsId: 'ssh-private-key', variable: 'SSH_PRIVATE_KEY')]) {
                            writeFile file: 'inventory.ini', text: """[web]
${env.VM_IP} ansible_ssh_user=azureuser ansible_ssh_private_key_file=${env.SSH_PRIVATE_KEY}"""
                        }
                    }
                }
            }
        }

        stage('Test SSH Connection') {
            steps {
                script {
                    timeout(time: 2, unit: 'MINUTES') {
                        withCredentials([string(credentialsId: 'ssh-private-key', variable: 'SSH_PRIVATE_KEY')]) {
                            writeFile file: 'private_key.pem', text: "${SSH_PRIVATE_KEY}"

                            bat """
                                echo Testing SSH connection to ${env.VM_IP}...
                                ssh -v -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i private_key.pem azureuser@${VM_IP} "echo Connected successfully"
                            """
                        }
                    }
                }
            }
        }

        stage('Copy Ansible Files to VM') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'ssh-private-key', variable: 'SSH_PRIVATE_KEY')]) {
                        writeFile file: 'private_key.pem', text: "${SSH_PRIVATE_KEY}"

                        // Create ansible directory structure on VM
                        bat """
                            ssh -i private_key.pem azureuser@${VM_IP} "mkdir -p ~/ansible/roles/nginx ~/ansible/roles/common"
                        """

                        // Copy roles and playbook to VM
                        bat """
                            scp -r -i private_key.pem ansible/roles/nginx/* azureuser@${VM_IP}:~/ansible/roles/nginx/
                            scp -r -i private_key.pem ansible/roles/common/* azureuser@${VM_IP}:~/ansible/roles/common/
                            scp -i private_key.pem ansible/playbook.yml azureuser@${VM_IP}:~/ansible/
                            scp -i private_key.pem ansible/inventory.ini azureuser@${VM_IP}:~/ansible/
                        """
                    }
                }
            }
        }

        stage('Install Ansible on VM') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'ssh-private-key', variable: 'SSH_PRIVATE_KEY')]) {
                        writeFile file: 'private_key.pem', text: "${SSH_PRIVATE_KEY}"

                        bat """
                            ssh -i private_key.pem azureuser@${VM_IP} "sudo apt-get update && \
                            sudo apt-get install -y software-properties-common && \
                            sudo apt-add-repository --yes --update ppa:ansible/ansible && \
                            sudo apt-get install -y ansible"
                        """
                    }
                }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'ssh-private-key', variable: 'SSH_PRIVATE_KEY')]) {
                        writeFile file: 'private_key.pem', text: "${SSH_PRIVATE_KEY}"

                        bat """
                            ssh -i private_key.pem azureuser@${VM_IP} "cd ~/ansible && \
                            ansible-playbook -i inventory.ini playbook.yml"
                        """
                    }
                }
            }
        }

        stage('Verify Nginx') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'ssh-private-key', variable: 'SSH_PRIVATE_KEY')]) {
                        writeFile file: 'private_key.pem', text: "${SSH_PRIVATE_KEY}"

                        bat """
                            ssh -i private_key.pem azureuser@${VM_IP} "curl http://localhost"
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully. Nginx should be running on http://${env.VM_IP}"
        }
        cleanup {
            cleanWs()
        }
    }
}
